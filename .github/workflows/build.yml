name: Build Native Addon

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Delete existing release
        run: |
          gh release delete v${{ steps.package-version.outputs.version }} --yes || true
          git push origin :refs/tags/v${{ steps.package-version.outputs.version }} || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Save upload URL
        run: echo "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets{?name,label}" > upload_url.txt

      - name: Upload upload URL as artifact
        uses: actions/upload-artifact@v4
        with:
          name: upload-url
          path: upload_url.txt

  build-and-upload:
    needs: create-release
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        arch:
          - x64
        include:
          - os: macos-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools

      - name: Install cross-compilers for Linux ARM
        if: matrix.os == 'ubuntu-latest' && (matrix.arch == 'arm' || matrix.arch == 'arm64')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armel-cross libc6-dev-armhf-cross          
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install build tools for Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y cmake

      - name: Install dependencies
        run: npm install

      - name: Configure build for Unix
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm" ]; then
            export CC=arm-linux-gnueabihf-gcc
            export CXX=arm-linux-gnueabihf-g++
            export LINK=arm-linux-gnueabihf-g++
            npm run configure -- --arch=arm
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export LINK=aarch64-linux-gnu-g++
            npm run configure -- --arch=arm64
          elif [ "${{ matrix.arch }}" != "x64" ]; then
            npm run configure -- --arch=${{ matrix.arch }}
          else
            npm run configure
          fi
        shell: bash

      - name: Configure build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run configure
        shell: pwsh

      - name: Determine output directory (Unix)
        if: matrix.os != 'windows-latest'
        id: set-output-dir-unix
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ] && [ "${{ matrix.arch }}" == "x64" ]; then
            echo "output_dir=macos_x64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "macos-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            echo "output_dir=macos_arm64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "x64" ]; then
            echo "output_dir=linux_x64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            echo "output_dir=linux_arm64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm" ]; then
            echo "output_dir=linux_arm" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Determine output directory (Windows)
        if: matrix.os == 'windows-latest'
        id: set-output-dir-windows
        run: |
          if ("${{ matrix.arch }}" -eq "x64") {
            echo "output_dir=windows_x64" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Check library format for ARM
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm'
        run: |
          file lib/build/lib60870_linux_arm.a
          readelf -h lib/build/lib60870_linux_arm.a || true
        shell: bash

      - name: Check library format for ARM64
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          file lib/build/lib60870_linux_arm64.a
          readelf -h lib/build/lib60870_linux_arm64.a || true
        shell: bash

      - name: Prebuild binaries