name: Build Native Addon

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        arch:
          - x64
        include:
          - os: macos-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools

      - name: Install cross-compilers for Linux ARM
        if: matrix.os == 'ubuntu-latest' && (matrix.arch == 'arm' || matrix.arch == 'arm64')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install build tools for Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y cmake

      - name: Install dependencies
        run: npm install

      - name: Configure build for Unix
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm" ]; then
            export CC=arm-linux-gnueabihf-gcc
            export CXX=arm-linux-gnueabihf-g++
            export LINK=arm-linux-gnueabihf-g++
            npm run configure -- --arch=arm
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export LINK=aarch64-linux-gnu-g++
            npm run configure -- --arch=arm64
          elif [ "${{ matrix.arch }}" != "x64" ]; then
            npm run configure -- --arch=${{ matrix.arch }}
          else
            npm run configure
          fi

      - name: Configure build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          npm run configure

      - name: Determine output directory (Unix)
        if: matrix.os != 'windows-latest'
        id: set-output-dir-unix
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ] && [ "${{ matrix.arch }}" == "x64" ]; then
            echo "output_dir=macos_x64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "macos-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            echo "output_dir=macos_arm64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "x64" ]; then
            echo "output_dir=linux_x64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            echo "output_dir=linux_arm64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm" ]; then
            echo "output_dir=linux_arm" >> $GITHUB_OUTPUT
          fi

      - name: Determine output directory (Windows)
        if: matrix.os == 'windows-latest'
        id: set-output-dir-windows
        run: |
          if ("${{ matrix.arch }}" -eq "x64") {
            echo "output_dir=win64" >> $GITHUB_OUTPUT
          }

      - name: Check library format for ARM
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm'
        run: |
          file lib/build/lib60870_linux_arm.a
          readelf -h lib/build/lib60870_linux_arm.a || true

      - name: Check library format for ARM64
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          file lib/build/lib60870_linux_arm64.a
          readelf -h lib/build/lib60870_linux_arm64.a || true

      - name: Prebuild binaries for Node.js 20
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ] && [ "${{ matrix.arch }}" == "x64" ]; then
            arch -x86_64 npm run prebuild -- --arch x64 --macos-min-version=11.0
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm" ]; then
            export CC=arm-linux-gnueabihf-gcc
            export CXX=arm-linux-gnueabihf-g++
            export LINK=arm-linux-gnueabihf-g++
            npm run prebuild -- --arch arm
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export LINK=aarch64-linux-gnu-g++
            npm run prebuild -- --arch arm64
          else
            npm run prebuild -- --arch ${{ matrix.arch }}
          fi

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.9
          release_name: Release v1.0.9
          draft: false
          prerelease: false

      - name: Upload prebuilt binaries to GitHub Releases
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: prebuilds/ih-lib60870-node-v1.0.9-node-v115-${{ steps.determine-platform.outputs.platform }}-${{ matrix.arch }}.tar.gz
          asset_name: ih-lib60870-node-v1.0.9-node-v115-${{ steps.determine-platform.outputs.platform }}-${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip

      - name: Determine platform for artifact name
        id: determine-platform
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "platform=linux" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "platform=win32" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "platform=darwin" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: addon_iec60870-${{ matrix.os }}-${{ matrix.arch }}
          path: prebuilds/ih-lib60870-node-v1.0.9-node-v115-${{ steps.determine-platform.outputs.platform }}-${{ matrix.arch }}.tar.gz